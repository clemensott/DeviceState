@using WaterpumpWeb.Models;
@using WaterpumpWeb.Utils;
@model DeviceStateModel
@{
    DateTime now = DateTime.UtcNow;
    DeviceActorOnline actorOnline = Model.ActoOnline;

    string statusText;
    string statusColor;
    if (!Model.OnState.IsOn.HasValue)
    {
        statusText = "Status ist unbekannt.";
        statusColor = "black";
    }
    else if (Model.OnState.IsOn == false)
    {
        statusText = $"{Model.Name} ist ausgeschalten.";
        statusColor = "blue";
    }
    else if (!actorOnline.LastUpdate.HasValue ||
        (now - actorOnline.LastUpdate) > TimeSpan.FromSeconds(60))
    {
        statusText = $"{Model.Name} ist wahrscheinlich ausgeschalten.";
        statusColor = "blue";
    }
    else
    {
        statusText = $"{Model.Name} ist eingeschalten.";
        statusColor = "green";
    }

    string valueText = "";
    if (!Model.Value.HasValue)
    {
        valueText = $"Keine {Model.Value.Name} bekannt.";
    }
    else
    {
        string typeOperator = Model.Value.Type switch
        {
            CompareType.SmallerThan => "< ",
            CompareType.GreaterThan => "> ",
            _ => string.Empty,
        };
        valueText = $"{Model.Value.Name}: {typeOperator}{Model.Value.Value:F1} °C";
    }
}

<div hx-get="/htmx/deviceState?id=@Model.Id&maxWaitMillis=9500"
     hx-trigger="load delay:50ms"
     hx-swap="outerHTML">
    <h1 class="status" style="color: @statusColor;">@statusText</h1>
    <h2 class="update">
        @{
            if (actorOnline.IsOnline)
            {
                @:Ist Online.
            }
            else if (actorOnline.LastUpdate.HasValue)
            {
                @:Letztes Update vor:
                await Html.RenderPartialAsync("CountTime", new CountTimeModel(actorOnline.LastUpdate, null));
            }
            else
            {
                @:Kein Update bekannt.
            }
        }
    </h2>
    <h2 class="value">@valueText</h2>
    <h1 class="countdown">
        @{
            if (Model.OnState.IsForeverOn && Model.OnState.IsOn != true)
            {
                @:Einschaltsignal gegeben
            }
            else if (!Model.OnState.IsForeverOn && Model.OnState.OnUntil > now)
            {
                await Html.RenderPartialAsync("CountTime", new CountTimeModel(null, Model.OnState.OnUntil));
            }
        }
    </h1>
</div>