@using DeviceStateWeb.Utils;
@model CountTimeModel
@{
    string fromText = string.Empty;
    string toText = string.Empty;

    TimeSpan? timeSpan = null;
    if (Model.From.HasValue)
    {
        fromText = ((long)(Model.From.Value - DateTime.UnixEpoch).TotalMilliseconds).ToString();
        timeSpan = DateTime.UtcNow - Model.From.Value;
    }
    else if (Model.To.HasValue)
    {
        toText = ((long)(Model.To.Value - DateTime.UnixEpoch).TotalMilliseconds).ToString();
        timeSpan = Model.To.Value - DateTime.UtcNow;
    }

    string initText = timeSpan.HasValue ? FormatUtils.FormatTimeSpan(timeSpan.Value) : string.Empty;
}

<span data-from="@fromText" data-to="@toText">@initText</span>
<script>
    (function () {
        function formatTimeSpan(millis) {
            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(millis / (1000 * 60 * 60 * 24));
            var hours = Math.floor((millis % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((millis % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((millis % (1000 * 60)) / 1000);

            var timeText = "";
            if (days > 0) timeText += days + "d ";
            if (days > 0 || hours > 0) timeText += hours + "h ";
            if (days > 0 || hours > 0 || minutes > 0) timeText += minutes + "m ";
            timeText += seconds + "s ";

            return timeText;
        }

        const content = document.currentScript.previousElementSibling;
        const from = content.dataset.from;
        const to = content.dataset.to;

        let getMillis = null;
        if (from) {
            getMillis = () => Date.now() - from;
        } else if (to) {
            getMillis = () => to - Date.now();
        }

        function isRemoved() {
            return !document.contains(content);
        }

        function updateContent() {
            const millis = getMillis();
            content.innerText = millis > 0 ? formatTimeSpan(millis) : "";
            return millis > 0;
        }

        if (getMillis) {
            const intervalId = setInterval(() => {
                if (isRemoved() || !updateContent()) {
                    clearInterval(intervalId);
                }
            }, 200);
        }
    })();
</script>
